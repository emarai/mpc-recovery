name: Integration
on:
  push:
    branches:
      - main
      - develop
  pull_request:
env:
  RUSTFLAGS: -D warnings
jobs:
  test:
    strategy:
      matrix:
        # FIXME: macos-latest-xl is disabled since colima is erroring out right now
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      issues: write
      pull-requests: write
    name: Test
    steps:
      - uses: actions/checkout@v3
      - name: Install Docker
        if: ${{ matrix.os == 'macos-latest-xl' }}
        run: |
          brew install docker
          colima start
          # Colima does not expose the Docker socket by default, we have to symlink it
          # https://github.com/abiosoft/colima/blob/main/docs/FAQ.md#cannot-connect-to-the-docker-daemon-at-unixvarrundockersock-is-the-docker-daemon-running
          sudo ln -sf $HOME/.colima/default/docker.sock /var/run/docker.sock
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Relayer Docker Image
        run: |
          docker pull ghcr.io/near/pagoda-relayer-rs-fastauth
          docker pull ghcr.io/near/sandbox
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
      - name: Install Protoc
        uses: arduino/setup-protoc@v1.1.2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: near/mpc-recovery:latest
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Test
        run: cargo test -p mpc-recovery-integration-tests --jobs 1 -- --test-threads 1
        env:
          RUST_LOG: INFO
          RUST_BACKTRACE: 1

      - name: Cache Criterion Results
        uses: actions/cache@v2
        with:
          path: target/criterion
          key: criterion-${{ github.event.pull_request.base.sha }}
      - name: Run benchmarks
        run: cargo bench
      - uses: actions/upload-artifact@v3
        with:
          name: my-artifact
          path: target/criterion

      - name: Benchmark Results
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Benchmark Results')
            })

            // Output of benchmark results:
            const output = `### Benchmark Results
            View reports [here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)
            `;

            // If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }